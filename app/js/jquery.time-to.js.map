{"version":3,"names":[],"mappings":"","sources":["jquery.time-to.js"],"sourcesContent":["/**\n * Time-To jQuery plug-in\n * Show countdown timer or realtime clock\n *\n * @author Oleksii Teterin <altmoc@gmail.com>\n * @version 1.3.0\n * @license MIT http://opensource.org/licenses/MIT\n * @date 2019-05-14\n * @host https://github.com/Lexxus/jq-timeTo\n */\n\n(function (factory) {\n    if (typeof define === 'function' && define.amd) {\n      // AMD (RequireJS)\n      define(['jquery'], factory);\n    } else if (typeof exports === 'object') {\n      // CommonJS (Node)\n      /* eslint-disable import/no-unresolved */\n      module.exports = factory(require('jquery'));\n    } else {\n      // globals\n      factory(jQuery);\n    }\n  }(function ($) {\n    var SECONDS_PER_DAY = 86400;\n    var SECONDS_PER_HOUR = 3600;\n\n    /* eslint-disable no-multi-spaces */\n    var defaults = {\n      callback: null, // callback function for exec when timer out\n      step: null, // callback function to exec every {stepCount} ticks\n      stepCount: 1, // number of ticks to increment before executing stepCount\n      captionSize: 0, // font-size by pixels for captions, if 0 then calculate automaticaly\n      countdown: true, // is countdown or real clock\n      countdownAlertLimit: 10, // limit in seconds when display red background\n      displayCaptions: false, // display captions under digit groups\n      displayDays: 0, // display day timer, count of days digits\n      displayHours: true, // display hours\n      fontFamily: '\"Montserrat-Regular\", \"Arial\", sans-serif',\n      fontSize: 0, // font-size of a digit by pixels (0 - use CSS instead)\n      lang: 'en', // language of caption\n      languages: {}, // extra or overridden languages\n      seconds: 0, // timer's countdown value in seconds\n      start: true, // true to start timer immediately\n      theme: 'white', // 'white' or 'black' theme fo timer's view\n\n      width: 25, // width of a digit area\n      height: 30, // height of a digit area\n      gap: 11, // gap size between numbers\n      vals: [0, 0, 0, 0, 0, 0, 0, 0, 0], // private, current value of each digit\n      limits: [9, 9, 9, 2, 9, 5, 9, 5, 9], // private, max value of each digit\n      iSec: 8, // private, index of second digit\n      iHour: 4, // private, index of hour digit\n      tickTimeout: 1000, // timeout betweet each timer tick in miliseconds\n      intervalId: null, // private\n      tickCount: 0 // private\n    };\n\n    var methods = {\n      start: function (sec) {\n        var intervalId;\n\n        if (sec) {\n          init.call(this, sec);\n          intervalId = setTimeout(tick.bind(this), 1000);\n\n          // save start time\n          this.data('ttStartTime', $.now());\n          this.data('intervalId', intervalId);\n        }\n      },\n\n      stop: function () {\n        var data = this.data();\n\n        if (data.intervalId) {\n          clearTimeout(data.intervalId);\n          this.data('intervalId', null);\n        }\n        return data;\n      },\n\n      reset: function (sec) {\n        var data = methods.stop.call(this);\n        var secs = typeof sec === 'undefined' ? data.seconds : sec;\n\n        this.find('div').css({\n          backgroundPosition: 'left center'\n        });\n        this.find('ul').parent().removeClass('timeTo-alert');\n\n        init.call(this, secs, true);\n      }\n    };\n\n    var dictionary = {\n      en: {\n        days: 'days',\n        hours: 'hours',\n        min: 'minutes',\n        sec: 'seconds'\n      },\n      ru: {\n        days: 'дней',\n        hours: 'часов',\n        min: 'минут',\n        sec: 'секунд'\n      },\n      ua: {\n        days: 'днiв',\n        hours: 'годин',\n        min: 'хвилин',\n        sec: 'Секунд'\n      },\n      de: {\n        days: 'Tag',\n        hours: 'Uhr',\n        min: 'Minuten',\n        sec: 'Secunden'\n      },\n      fr: {\n        days: 'jours',\n        hours: 'heures',\n        min: 'minutes',\n        sec: 'secondes'\n      },\n      es: {\n        days: 'días',\n        hours: 'horas',\n        min: 'minutos',\n        sec: 'segundos'\n      },\n      sp: {\n        days: 'días',\n        hours: 'horas',\n        min: 'minutos',\n        sec: 'segundos'\n      },\n      it: {\n        days: 'giorni',\n        hours: 'ore',\n        min: 'minuti',\n        sec: 'secondi'\n      },\n      nl: {\n        days: 'dagen',\n        hours: 'uren',\n        min: 'minuten',\n        sec: 'seconden'\n      },\n      no: {\n        days: 'dager',\n        hours: 'timer',\n        min: 'minutter',\n        sec: 'sekunder'\n      },\n      pt: {\n        days: 'dias',\n        hours: 'horas',\n        min: 'minutos',\n        sec: 'segundos'\n      },\n      tr: {\n        days: 'gün',\n        hours: 'saat',\n        min: 'dakika',\n        sec: 'saniye'\n      },\n      pl: {\n        days: 'dni',\n        hours: 'godziny',\n        min: 'minuty',\n        sec: 'secundy'\n      }\n    };\n\n    /* eslint-enable no-multi-spaces */\n\n    if (typeof $.support.transition === 'undefined') {\n      $.support.transition = (function () {\n        var thisBody = document.body || document.documentElement;\n        var thisStyle = thisBody.style;\n        var support = thisStyle.transition !== undefined ||\n          thisStyle.WebkitTransition !== undefined ||\n          thisStyle.MozTransition !== undefined ||\n          thisStyle.MsTransition !== undefined ||\n          thisStyle.OTransition !== undefined;\n\n        return support;\n      }());\n    }\n\n    $.fn.timeTo = function () {\n      var options = {};\n      var now = Date.now();\n      var j, arg, num, method, time, days, tt, sec, m, t;\n\n      for (j = 0; j < arguments.length; j += 1) {\n        arg = arguments[j];\n        if (j === 0 && typeof arg === 'string') {\n          method = arg;\n        } else if (typeof arg === 'object') {\n          if (typeof arg.getTime === 'function') {\n            // arg is a Date object\n            options.timeTo = arg;\n          } else {\n            // arg is an options object\n            options = $.extend(options, arg);\n          }\n        } else if (typeof arg === 'function') {\n          // arg is callback\n          options.callback = arg;\n        } else {\n          num = parseInt(arg, 10);\n          // arg is seconds of timeout\n          if (!isNaN(num)) {\n            options.seconds = num;\n          }\n        }\n      }\n\n      // set time to countdown to\n      if (options.timeTo) {\n        if (options.timeTo.getTime) {\n          // set time as date object\n          time = options.timeTo.getTime();\n        } else if (typeof options.timeTo === 'number') {\n          // set time as integer in millisec\n          time = options.timeTo;\n        }\n        if (time > now) {\n          options.seconds = Math.floor((time - now) / 1000);\n        } else {\n          options.seconds = 0;\n        }\n      } else if (options.time || !options.seconds) {\n        time = options.time;\n\n        if (!time) {\n          time = new Date(now);\n        }\n\n        if (typeof time === 'object' && time.getTime) {\n          options.seconds = (time.getDate() * SECONDS_PER_DAY) + (time.getHours() * SECONDS_PER_HOUR) +\n            (time.getMinutes() * 60) + time.getSeconds();\n          options.countdown = false;\n        } else if (typeof time === 'string') {\n          tt = time.split(':');\n          sec = 0;\n          m = 1;\n\n          while (tt.length) {\n            t = tt.pop();\n            sec += t * m;\n            m *= 60;\n          }\n          options.seconds = sec;\n          options.countdown = false;\n        }\n      }\n\n      if (options.countdown !== false &&\n        options.seconds > SECONDS_PER_DAY &&\n        typeof options.displayDays === 'undefined') {\n        days = Math.floor(options.seconds / SECONDS_PER_DAY);\n        options.displayDays = (days < 10 && 1) || (days < 100 && 2) || 3;\n      } else if (options.displayDays === true) {\n        options.displayDays = 3;\n      } else if (options.displayDays) {\n        options.displayDays = options.displayDays > 0 ? Math.floor(options.displayDays) : 3;\n      }\n\n      return this.each(function () {\n          var $this = $(this);\n          var data = $this.data();\n          var defs, opt, i, css, language, left, ulhtml, style, dhtml1, dhtml2, dot2, maxWidth,\n            captionSize, fsStyleVal, fsStyle, thtml, marginRight, dhtml, $digits, dif, vals, limits;\n\n          if (data.intervalId) {\n            clearInterval(data.intervalId);\n            data.intervalId = null;\n          }\n\n          if (!data.vals) {\n            // new clock\n            if (data.opt) {\n              opt = data.options;\n            } else {\n              opt = options;\n            }\n\n            // clone the defaults object\n            defs = Object.keys(defaults).reduce(function (obj, key) {\n              if (Array.isArray(defaults[key])) {\n                obj[key] = defaults[key].slice(0);\n              } else {\n                obj[key] = defaults[key];\n              }\n              return obj;\n            }, {});\n\n            data = $.extend(defs, opt);\n            data.options = opt;\n\n            data.height = Math.round((data.fontSize * 100) / 93) || data.height;\n            data.width = Math.round((data.fontSize * 0.6) + (data.height * 0.13)) || data.width;\n            data.displayHours = !!(data.displayDays || data.displayHours);\n\n            css = {\n              fontFamily: data.fontFamily\n            };\n            if (data.fontSize > 0) {\n              css.fontSize = data.fontSize + 'px';\n            }\n\n              language = data.languages[data.lang] || dictionary[data.lang];\n\n              $this\n              .addClass('timeTo')\n              .addClass('timeTo-' + data.theme)\n              .css(css);\n\n              left = 0; ulhtml = '<ul style=\"left:' + left + 'px; top:-' + data.height + 'px\"><li>0</li><li>0</li></ul></div>'; style = data.fontSize ?\n              ' style=\"width:' + data.width + 'px; height:' + data.height + 'px;\"' :\n              ' style=\"\"'; dhtml1 = '<div class=\"first\"' + style + '>' + ulhtml; dhtml2 = '<div' + style + '>' + ulhtml; dot2 = '<span>:</span>'; maxWidth = Math.round((data.width * 2) + 3); captionSize = data.captionSize || (data.fontSize && Math.round(data.fontSize * 0.43)); fsStyleVal = captionSize ? 'font-size:' + captionSize + 'px;' : ''; fsStyle = captionSize ? ' style=\"' + fsStyleVal + '\"' : '';\n\n              thtml = (data.displayCaptions ?\n                (data.displayHours ?\n                  dot2 + '<figure style=\"max-width:' + maxWidth + 'px\">$1<figcaption' + fsStyle + '>' +\n                  language.hours + '</figcaption></figure>' + dot2 :\n                  '') +\n                '<figure style=\"max-width:' + maxWidth + 'px\">$1<figcaption' + fsStyle + '>' + language.min +\n                '</figcaption></figure>' + dot2 +\n                '<figure style=\"max-width:' + maxWidth + 'px\">$1<figcaption' + fsStyle + '>' + language.sec +\n                '</figcaption></figure>' :\n                (data.displayHours ? '$1' + dot2 : '') + '$1' + dot2 + '$1'\n              ).replace(/\\$1/g, dhtml1 + dhtml2);\n\n              if (data.displayDays > 0) {\n                marginRight = Math.round(data.fontSize * 0.4 || defaults.gap);\n                dhtml = dhtml1;\n\n                for (i = data.displayDays - 1; i > 0; i -= 1) {\n                  dhtml += i === 1 ?\n                    dhtml2.replace('\">', 'margin-right:' + 'px\">') :\n                    dhtml2;\n                }\n\n                if (data.displayDays === 1) {\n                  dhtml = dhtml.replace('\">', 'margin-right:' + marginRight + 'px\">');\n                }\n\n                thtml = (data.displayCaptions ?\n                    '<figure style=\"width: auto\">$1' +\n                    '<figcaption style=\"' + fsStyleVal + 'padding-right:' + marginRight + 'px\">' +\n                    language.days + '</figcaption></figure>' :\n                    '$1')\n                  .replace(/\\$1/, dhtml) + thtml;\n              }\n              $this.html(thtml);\n            }\n            else if (method !== 'reset') {\n              // exists clock\n              $.extend(data, options);\n            }\n\n            $digits = $this.find('div');\n\n            if ($digits.length < data.vals.length) {\n              dif = data.vals.length - $digits.length;\n              vals = data.vals;\n              limits = data.limits;\n\n              data.vals = [];\n              data.limits = [];\n              for (i = 0; i < $digits.length; i += 1) {\n                data.vals[i] = vals[dif + i];\n                data.limits[i] = limits[dif + i];\n              }\n              data.iSec = data.vals.length - 1;\n              data.iHour = data.vals.length - 5;\n            }\n            data.sec = data.seconds;\n            $this.data(data);\n\n            if (method && methods[method]) {\n              methods[method].call($this, data.seconds);\n            } else if (data.start) {\n              methods.start.call($this, data.seconds);\n            } else {\n              init.call($this, data.seconds);\n            }\n          });\n      };\n\n\n      function init(sec, force) {\n        var data = this.data();\n        var $digits = this.find('ul');\n        var isInterval = false;\n        var days, rest, hours, minutes, secs, str, i, j, val;\n\n        if (!data.vals || $digits.length === 0) {\n          return;\n        }\n\n        if (!sec) {\n          sec = data.seconds;\n        }\n\n        if (data.intervalId) {\n          isInterval = true;\n          clearTimeout(data.intervalId);\n        }\n\n\n        days = Math.floor(sec / SECONDS_PER_DAY);\n        rest = days * SECONDS_PER_DAY;\n        hours = Math.floor((sec - rest) / SECONDS_PER_HOUR);\n\n        rest += hours * SECONDS_PER_HOUR;\n\n        minutes = Math.floor((sec - rest) / 60);\n\n        rest += minutes * 60;\n\n        secs = sec - rest;\n        str = (days < 100 ? '0' + (days < 10 ? '0' : '') : '') +\n          days + (hours < 10 ? '0' : '') + hours + (minutes < 10 ? '0' : '') +\n          minutes + (secs < 10 ? '0' : '') + secs;\n\n\n        for (i = data.vals.length - 1, j = str.length - 1; i >= 0; i -= 1, j -= 1) {\n          val = parseInt(str.substr(j, 1), 10);\n          data.vals[i] = val;\n          $digits.eq(i).children().html(val);\n        }\n        if (isInterval || force) {\n          data.ttStartTime = Date.now();\n          data.intervalId = setTimeout(tick.bind(this), 1000);\n          this.data('intervalId', data.intervalId);\n        }\n      }\n\n      /**\n       * Switch specified digit by digit index\n       * @param {number} - digit index\n       */\n      function tick(digit) {\n        var me = this;\n        var $digits = this.find('ul');\n        var data = this.data();\n        var n, $ul, $li, step, tickTimeout, timeDiff;\n\n        if (!data.vals || $digits.length === 0) {\n          if (data.intervalId) {\n            clearTimeout(data.intervalId);\n            this.data('intervalId', null);\n          }\n          if (data.callback) {\n            data.callback();\n          }\n          return;\n        }\n        if (typeof digit === 'undefined') {\n          digit = data.iSec;\n        }\n\n\n        this.data('tickCount', data.tickCount + 1);\n\n        n = data.vals[digit];\n        $ul = $digits.eq(digit);\n        $li = $ul.children();\n        step = data.countdown ? -1 : 1;\n\n        $li.eq(1).html(n);\n        n += step;\n\n\n        if (typeof data.step === 'function' && data.tickCount % data.stepCount === 0) { // simplified if-block\n          this.data('tickCount', 0); // prevent number overload\n          data.step();\n        }\n\n        if (digit === data.iSec) {\n          tickTimeout = data.tickTimeout;\n          timeDiff = Date.now() - data.ttStartTime;\n\n          data.sec += step;\n\n          tickTimeout += (Math.abs(data.seconds - data.sec) * tickTimeout) - timeDiff;\n\n          data.intervalId = setTimeout(tick.bind(this), tickTimeout);\n        }\n\n        if (n < 0 || n > data.limits[digit]) {\n          if (n < 0) {\n            n = data.limits[digit];\n            // fix for hours when day changing\n            if (digit === data.iHour &&\n              data.displayDays > 0 &&\n              data.vals[digit - 1] === 0) {\n              n = 3;\n            }\n          } else {\n            n = 0;\n          }\n\n          if (digit > 0) {\n            tick.call(this, digit - 1);\n          }\n        } else if (!data.countdown // fix for hours when day changing in clock mode\n          &&\n          digit === data.iHour &&\n          data.displayDays > 0 &&\n          data.vals[digit - 1] === 2 && data.vals[digit] === 3) {\n          n = 0;\n          tick.call(this, digit - 1);\n        }\n        $li.eq(0).html(n);\n\n        if ($.support.transition) {\n          $ul.addClass('transition');\n          $ul.css({\n            top: 0\n          });\n\n          setTimeout(function () {\n            $ul.removeClass('transition');\n            $li.eq(1).html(n);\n            $ul.css({\n              top: '-' + data.height + 'px'\n            });\n\n            if (step > 0 || digit !== data.iSec) {\n              return;\n            }\n\n            if (data.sec === data.countdownAlertLimit) {\n              $digits.parent().addClass('timeTo-alert');\n            }\n\n            if (data.sec === 0) {\n              $digits.parent().removeClass('timeTo-alert');\n\n              if (data.intervalId) {\n                clearTimeout(data.intervalId);\n                me.data('intervalId', null);\n              }\n\n              if (typeof data.callback === 'function') {\n                data.callback();\n              }\n            }\n          }, 410);\n        } else {\n          $ul.stop().animate({\n            top: 0\n          }, 400, digit !== data.iSec ? null : function () {\n            $li.eq(1).html(n);\n            $ul.css({\n              top: '-' + data.height + 'px'\n            });\n\n            if (step > 0 || digit !== data.iSec) {\n              return;\n            }\n\n            if (data.sec === data.countdownAlertLimit) {\n              $digits.parent().addClass('timeTo-alert');\n            } else if (data.sec === 0) {\n              $digits.parent().removeClass('timeTo-alert');\n\n              if (data.intervalId) {\n                clearTimeout(data.intervalId);\n                me.data('intervalId', null);\n              }\n\n              if (typeof data.callback === 'function') {\n                data.callback();\n              }\n            }\n          });\n        }\n        data.vals[digit] = n;\n      }\n\n      return $;\n    }));"],"file":"jquery.time-to.js"}