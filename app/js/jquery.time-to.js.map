{"version":3,"names":[],"mappings":"","sources":["jquery.time-to.js"],"sourcesContent":["/**\r\n * Time-To jQuery plug-in\r\n * Show countdown timer or realtime clock\r\n *\r\n * @author Oleksii Teterin <altmoc@gmail.com>\r\n * @version 1.3.0\r\n * @license MIT http://opensource.org/licenses/MIT\r\n * @date 2019-05-14\r\n * @host https://github.com/Lexxus/jq-timeTo\r\n */\r\n\r\n(function (factory) {\r\n    if (typeof define === 'function' && define.amd) {\r\n      // AMD (RequireJS)\r\n      define(['jquery'], factory);\r\n    } else if (typeof exports === 'object') {\r\n      // CommonJS (Node)\r\n      /* eslint-disable import/no-unresolved */\r\n      module.exports = factory(require('jquery'));\r\n    } else {\r\n      // globals\r\n      factory(jQuery);\r\n    }\r\n  }(function ($) {\r\n    var SECONDS_PER_DAY = 86400;\r\n    var SECONDS_PER_HOUR = 3600;\r\n\r\n    /* eslint-disable no-multi-spaces */\r\n    var defaults = {\r\n      callback: null, // callback function for exec when timer out\r\n      step: null, // callback function to exec every {stepCount} ticks\r\n      stepCount: 1, // number of ticks to increment before executing stepCount\r\n      captionSize: 0, // font-size by pixels for captions, if 0 then calculate automaticaly\r\n      countdown: true, // is countdown or real clock\r\n      countdownAlertLimit: 10, // limit in seconds when display red background\r\n      displayCaptions: false, // display captions under digit groups\r\n      displayDays: 0, // display day timer, count of days digits\r\n      displayHours: true, // display hours\r\n      fontFamily: '\"Montserrat-Regular\", \"Arial\", sans-serif',\r\n      fontSize: 0, // font-size of a digit by pixels (0 - use CSS instead)\r\n      lang: 'en', // language of caption\r\n      languages: {}, // extra or overridden languages\r\n      seconds: 0, // timer's countdown value in seconds\r\n      start: true, // true to start timer immediately\r\n      theme: 'white', // 'white' or 'black' theme fo timer's view\r\n\r\n      width: 25, // width of a digit area\r\n      height: 30, // height of a digit area\r\n      gap: 11, // gap size between numbers\r\n      vals: [0, 0, 0, 0, 0, 0, 0, 0, 0], // private, current value of each digit\r\n      limits: [9, 9, 9, 2, 9, 5, 9, 5, 9], // private, max value of each digit\r\n      iSec: 8, // private, index of second digit\r\n      iHour: 4, // private, index of hour digit\r\n      tickTimeout: 1000, // timeout betweet each timer tick in miliseconds\r\n      intervalId: null, // private\r\n      tickCount: 0 // private\r\n    };\r\n\r\n    var methods = {\r\n      start: function (sec) {\r\n        var intervalId;\r\n\r\n        if (sec) {\r\n          init.call(this, sec);\r\n          intervalId = setTimeout(tick.bind(this), 1000);\r\n\r\n          // save start time\r\n          this.data('ttStartTime', $.now());\r\n          this.data('intervalId', intervalId);\r\n        }\r\n      },\r\n\r\n      stop: function () {\r\n        var data = this.data();\r\n\r\n        if (data.intervalId) {\r\n          clearTimeout(data.intervalId);\r\n          this.data('intervalId', null);\r\n        }\r\n        return data;\r\n      },\r\n\r\n      reset: function (sec) {\r\n        var data = methods.stop.call(this);\r\n        var secs = typeof sec === 'undefined' ? data.seconds : sec;\r\n\r\n        this.find('div').css({\r\n          backgroundPosition: 'left center'\r\n        });\r\n        this.find('ul').parent().removeClass('timeTo-alert');\r\n\r\n        init.call(this, secs, true);\r\n      }\r\n    };\r\n\r\n    var dictionary = {\r\n      en: {\r\n        days: 'days',\r\n        hours: 'hours',\r\n        min: 'minutes',\r\n        sec: 'seconds'\r\n      },\r\n      ru: {\r\n        days: 'дней',\r\n        hours: 'часов',\r\n        min: 'минут',\r\n        sec: 'секунд'\r\n      },\r\n      ua: {\r\n        days: 'днiв',\r\n        hours: 'годин',\r\n        min: 'хвилин',\r\n        sec: 'Секунд'\r\n      },\r\n      de: {\r\n        days: 'Tag',\r\n        hours: 'Uhr',\r\n        min: 'Minuten',\r\n        sec: 'Secunden'\r\n      },\r\n      fr: {\r\n        days: 'jours',\r\n        hours: 'heures',\r\n        min: 'minutes',\r\n        sec: 'secondes'\r\n      },\r\n      es: {\r\n        days: 'días',\r\n        hours: 'horas',\r\n        min: 'minutos',\r\n        sec: 'segundos'\r\n      },\r\n      sp: {\r\n        days: 'días',\r\n        hours: 'horas',\r\n        min: 'minutos',\r\n        sec: 'segundos'\r\n      },\r\n      it: {\r\n        days: 'giorni',\r\n        hours: 'ore',\r\n        min: 'minuti',\r\n        sec: 'secondi'\r\n      },\r\n      nl: {\r\n        days: 'dagen',\r\n        hours: 'uren',\r\n        min: 'minuten',\r\n        sec: 'seconden'\r\n      },\r\n      no: {\r\n        days: 'dager',\r\n        hours: 'timer',\r\n        min: 'minutter',\r\n        sec: 'sekunder'\r\n      },\r\n      pt: {\r\n        days: 'dias',\r\n        hours: 'horas',\r\n        min: 'minutos',\r\n        sec: 'segundos'\r\n      },\r\n      tr: {\r\n        days: 'gün',\r\n        hours: 'saat',\r\n        min: 'dakika',\r\n        sec: 'saniye'\r\n      },\r\n      pl: {\r\n        days: 'dni',\r\n        hours: 'godziny',\r\n        min: 'minuty',\r\n        sec: 'secundy'\r\n      }\r\n    };\r\n\r\n    /* eslint-enable no-multi-spaces */\r\n\r\n    if (typeof $.support.transition === 'undefined') {\r\n      $.support.transition = (function () {\r\n        var thisBody = document.body || document.documentElement;\r\n        var thisStyle = thisBody.style;\r\n        var support = thisStyle.transition !== undefined ||\r\n          thisStyle.WebkitTransition !== undefined ||\r\n          thisStyle.MozTransition !== undefined ||\r\n          thisStyle.MsTransition !== undefined ||\r\n          thisStyle.OTransition !== undefined;\r\n\r\n        return support;\r\n      }());\r\n    }\r\n\r\n    $.fn.timeTo = function () {\r\n      var options = {};\r\n      var now = Date.now();\r\n      var j, arg, num, method, time, days, tt, sec, m, t;\r\n\r\n      for (j = 0; j < arguments.length; j += 1) {\r\n        arg = arguments[j];\r\n        if (j === 0 && typeof arg === 'string') {\r\n          method = arg;\r\n        } else if (typeof arg === 'object') {\r\n          if (typeof arg.getTime === 'function') {\r\n            // arg is a Date object\r\n            options.timeTo = arg;\r\n          } else {\r\n            // arg is an options object\r\n            options = $.extend(options, arg);\r\n          }\r\n        } else if (typeof arg === 'function') {\r\n          // arg is callback\r\n          options.callback = arg;\r\n        } else {\r\n          num = parseInt(arg, 10);\r\n          // arg is seconds of timeout\r\n          if (!isNaN(num)) {\r\n            options.seconds = num;\r\n          }\r\n        }\r\n      }\r\n\r\n      // set time to countdown to\r\n      if (options.timeTo) {\r\n        if (options.timeTo.getTime) {\r\n          // set time as date object\r\n          time = options.timeTo.getTime();\r\n        } else if (typeof options.timeTo === 'number') {\r\n          // set time as integer in millisec\r\n          time = options.timeTo;\r\n        }\r\n        if (time > now) {\r\n          options.seconds = Math.floor((time - now) / 1000);\r\n        } else {\r\n          options.seconds = 0;\r\n        }\r\n      } else if (options.time || !options.seconds) {\r\n        time = options.time;\r\n\r\n        if (!time) {\r\n          time = new Date(now);\r\n        }\r\n\r\n        if (typeof time === 'object' && time.getTime) {\r\n          options.seconds = (time.getDate() * SECONDS_PER_DAY) + (time.getHours() * SECONDS_PER_HOUR) +\r\n            (time.getMinutes() * 60) + time.getSeconds();\r\n          options.countdown = false;\r\n        } else if (typeof time === 'string') {\r\n          tt = time.split(':');\r\n          sec = 0;\r\n          m = 1;\r\n\r\n          while (tt.length) {\r\n            t = tt.pop();\r\n            sec += t * m;\r\n            m *= 60;\r\n          }\r\n          options.seconds = sec;\r\n          options.countdown = false;\r\n        }\r\n      }\r\n\r\n      if (options.countdown !== false &&\r\n        options.seconds > SECONDS_PER_DAY &&\r\n        typeof options.displayDays === 'undefined') {\r\n        days = Math.floor(options.seconds / SECONDS_PER_DAY);\r\n        options.displayDays = (days < 10 && 1) || (days < 100 && 2) || 3;\r\n      } else if (options.displayDays === true) {\r\n        options.displayDays = 3;\r\n      } else if (options.displayDays) {\r\n        options.displayDays = options.displayDays > 0 ? Math.floor(options.displayDays) : 3;\r\n      }\r\n\r\n      return this.each(function () {\r\n          var $this = $(this);\r\n          var data = $this.data();\r\n          var defs, opt, i, css, language, left, ulhtml, style, dhtml1, dhtml2, dot2, maxWidth,\r\n            captionSize, fsStyleVal, fsStyle, thtml, marginRight, dhtml, $digits, dif, vals, limits;\r\n\r\n          if (data.intervalId) {\r\n            clearInterval(data.intervalId);\r\n            data.intervalId = null;\r\n          }\r\n\r\n          if (!data.vals) {\r\n            // new clock\r\n            if (data.opt) {\r\n              opt = data.options;\r\n            } else {\r\n              opt = options;\r\n            }\r\n\r\n            // clone the defaults object\r\n            defs = Object.keys(defaults).reduce(function (obj, key) {\r\n              if (Array.isArray(defaults[key])) {\r\n                obj[key] = defaults[key].slice(0);\r\n              } else {\r\n                obj[key] = defaults[key];\r\n              }\r\n              return obj;\r\n            }, {});\r\n\r\n            data = $.extend(defs, opt);\r\n            data.options = opt;\r\n\r\n            data.height = Math.round((data.fontSize * 100) / 93) || data.height;\r\n            data.width = Math.round((data.fontSize * 0.6) + (data.height * 0.13)) || data.width;\r\n            data.displayHours = !!(data.displayDays || data.displayHours);\r\n\r\n            css = {\r\n              fontFamily: data.fontFamily\r\n            };\r\n            if (data.fontSize > 0) {\r\n              css.fontSize = data.fontSize + 'px';\r\n            }\r\n\r\n              language = data.languages[data.lang] || dictionary[data.lang];\r\n\r\n              $this\r\n              .addClass('timeTo')\r\n              .addClass('timeTo-' + data.theme)\r\n              .css(css);\r\n\r\n              left = 0; ulhtml = '<ul style=\"left:' + left + 'px; top:-' + data.height + 'px\"><li>0</li><li>0</li></ul></div>'; style = data.fontSize ?\r\n              ' style=\"width:' + data.width + 'px; height:' + data.height + 'px;\"' :\r\n              ' style=\"\"'; dhtml1 = '<div class=\"first\"' + style + '>' + ulhtml; dhtml2 = '<div' + style + '>' + ulhtml; dot2 = '<span>:</span>'; maxWidth = Math.round((data.width * 2) + 3); captionSize = data.captionSize || (data.fontSize && Math.round(data.fontSize * 0.43)); fsStyleVal = captionSize ? 'font-size:' + captionSize + 'px;' : ''; fsStyle = captionSize ? ' style=\"' + fsStyleVal + '\"' : '';\r\n\r\n              thtml = (data.displayCaptions ?\r\n                (data.displayHours ?\r\n                  dot2 + '<figure style=\"max-width:' + maxWidth + 'px\">$1<figcaption' + fsStyle + '>' +\r\n                  language.hours + '</figcaption></figure>' + dot2 :\r\n                  '') +\r\n                '<figure style=\"max-width:' + maxWidth + 'px\">$1<figcaption' + fsStyle + '>' + language.min +\r\n                '</figcaption></figure>' + dot2 +\r\n                '<figure style=\"max-width:' + maxWidth + 'px\">$1<figcaption' + fsStyle + '>' + language.sec +\r\n                '</figcaption></figure>' :\r\n                (data.displayHours ? '$1' + dot2 : '') + '$1' + dot2 + '$1'\r\n              ).replace(/\\$1/g, dhtml1 + dhtml2);\r\n\r\n              if (data.displayDays > 0) {\r\n                marginRight = Math.round(data.fontSize * 0.4 || defaults.gap);\r\n                dhtml = dhtml1;\r\n\r\n                for (i = data.displayDays - 1; i > 0; i -= 1) {\r\n                  dhtml += i === 1 ?\r\n                    dhtml2.replace('\">', 'margin-right:' + 'px\">') :\r\n                    dhtml2;\r\n                }\r\n\r\n                if (data.displayDays === 1) {\r\n                  dhtml = dhtml.replace('\">', 'margin-right:' + marginRight + 'px\">');\r\n                }\r\n\r\n                thtml = (data.displayCaptions ?\r\n                    '<figure style=\"width: auto\">$1' +\r\n                    '<figcaption style=\"' + fsStyleVal + 'padding-right:' + marginRight + 'px\">' +\r\n                    language.days + '</figcaption></figure>' :\r\n                    '$1')\r\n                  .replace(/\\$1/, dhtml) + thtml;\r\n              }\r\n              $this.html(thtml);\r\n            }\r\n            else if (method !== 'reset') {\r\n              // exists clock\r\n              $.extend(data, options);\r\n            }\r\n\r\n            $digits = $this.find('div');\r\n\r\n            if ($digits.length < data.vals.length) {\r\n              dif = data.vals.length - $digits.length;\r\n              vals = data.vals;\r\n              limits = data.limits;\r\n\r\n              data.vals = [];\r\n              data.limits = [];\r\n              for (i = 0; i < $digits.length; i += 1) {\r\n                data.vals[i] = vals[dif + i];\r\n                data.limits[i] = limits[dif + i];\r\n              }\r\n              data.iSec = data.vals.length - 1;\r\n              data.iHour = data.vals.length - 5;\r\n            }\r\n            data.sec = data.seconds;\r\n            $this.data(data);\r\n\r\n            if (method && methods[method]) {\r\n              methods[method].call($this, data.seconds);\r\n            } else if (data.start) {\r\n              methods.start.call($this, data.seconds);\r\n            } else {\r\n              init.call($this, data.seconds);\r\n            }\r\n          });\r\n      };\r\n\r\n\r\n      function init(sec, force) {\r\n        var data = this.data();\r\n        var $digits = this.find('ul');\r\n        var isInterval = false;\r\n        var days, rest, hours, minutes, secs, str, i, j, val;\r\n\r\n        if (!data.vals || $digits.length === 0) {\r\n          return;\r\n        }\r\n\r\n        if (!sec) {\r\n          sec = data.seconds;\r\n        }\r\n\r\n        if (data.intervalId) {\r\n          isInterval = true;\r\n          clearTimeout(data.intervalId);\r\n        }\r\n\r\n\r\n        days = Math.floor(sec / SECONDS_PER_DAY);\r\n        rest = days * SECONDS_PER_DAY;\r\n        hours = Math.floor((sec - rest) / SECONDS_PER_HOUR);\r\n\r\n        rest += hours * SECONDS_PER_HOUR;\r\n\r\n        minutes = Math.floor((sec - rest) / 60);\r\n\r\n        rest += minutes * 60;\r\n\r\n        secs = sec - rest;\r\n        str = (days < 100 ? '0' + (days < 10 ? '0' : '') : '') +\r\n          days + (hours < 10 ? '0' : '') + hours + (minutes < 10 ? '0' : '') +\r\n          minutes + (secs < 10 ? '0' : '') + secs;\r\n\r\n\r\n        for (i = data.vals.length - 1, j = str.length - 1; i >= 0; i -= 1, j -= 1) {\r\n          val = parseInt(str.substr(j, 1), 10);\r\n          data.vals[i] = val;\r\n          $digits.eq(i).children().html(val);\r\n        }\r\n        if (isInterval || force) {\r\n          data.ttStartTime = Date.now();\r\n          data.intervalId = setTimeout(tick.bind(this), 1000);\r\n          this.data('intervalId', data.intervalId);\r\n        }\r\n      }\r\n\r\n      /**\r\n       * Switch specified digit by digit index\r\n       * @param {number} - digit index\r\n       */\r\n      function tick(digit) {\r\n        var me = this;\r\n        var $digits = this.find('ul');\r\n        var data = this.data();\r\n        var n, $ul, $li, step, tickTimeout, timeDiff;\r\n\r\n        if (!data.vals || $digits.length === 0) {\r\n          if (data.intervalId) {\r\n            clearTimeout(data.intervalId);\r\n            this.data('intervalId', null);\r\n          }\r\n          if (data.callback) {\r\n            data.callback();\r\n          }\r\n          return;\r\n        }\r\n        if (typeof digit === 'undefined') {\r\n          digit = data.iSec;\r\n        }\r\n\r\n\r\n        this.data('tickCount', data.tickCount + 1);\r\n\r\n        n = data.vals[digit];\r\n        $ul = $digits.eq(digit);\r\n        $li = $ul.children();\r\n        step = data.countdown ? -1 : 1;\r\n\r\n        $li.eq(1).html(n);\r\n        n += step;\r\n\r\n\r\n        if (typeof data.step === 'function' && data.tickCount % data.stepCount === 0) { // simplified if-block\r\n          this.data('tickCount', 0); // prevent number overload\r\n          data.step();\r\n        }\r\n\r\n        if (digit === data.iSec) {\r\n          tickTimeout = data.tickTimeout;\r\n          timeDiff = Date.now() - data.ttStartTime;\r\n\r\n          data.sec += step;\r\n\r\n          tickTimeout += (Math.abs(data.seconds - data.sec) * tickTimeout) - timeDiff;\r\n\r\n          data.intervalId = setTimeout(tick.bind(this), tickTimeout);\r\n        }\r\n\r\n        if (n < 0 || n > data.limits[digit]) {\r\n          if (n < 0) {\r\n            n = data.limits[digit];\r\n            // fix for hours when day changing\r\n            if (digit === data.iHour &&\r\n              data.displayDays > 0 &&\r\n              data.vals[digit - 1] === 0) {\r\n              n = 3;\r\n            }\r\n          } else {\r\n            n = 0;\r\n          }\r\n\r\n          if (digit > 0) {\r\n            tick.call(this, digit - 1);\r\n          }\r\n        } else if (!data.countdown // fix for hours when day changing in clock mode\r\n          &&\r\n          digit === data.iHour &&\r\n          data.displayDays > 0 &&\r\n          data.vals[digit - 1] === 2 && data.vals[digit] === 3) {\r\n          n = 0;\r\n          tick.call(this, digit - 1);\r\n        }\r\n        $li.eq(0).html(n);\r\n\r\n        if ($.support.transition) {\r\n          $ul.addClass('transition');\r\n          $ul.css({\r\n            top: 0\r\n          });\r\n\r\n          setTimeout(function () {\r\n            $ul.removeClass('transition');\r\n            $li.eq(1).html(n);\r\n            $ul.css({\r\n              top: '-' + data.height + 'px'\r\n            });\r\n\r\n            if (step > 0 || digit !== data.iSec) {\r\n              return;\r\n            }\r\n\r\n            if (data.sec === data.countdownAlertLimit) {\r\n              $digits.parent().addClass('timeTo-alert');\r\n            }\r\n\r\n            if (data.sec === 0) {\r\n              $digits.parent().removeClass('timeTo-alert');\r\n\r\n              if (data.intervalId) {\r\n                clearTimeout(data.intervalId);\r\n                me.data('intervalId', null);\r\n              }\r\n\r\n              if (typeof data.callback === 'function') {\r\n                data.callback();\r\n              }\r\n            }\r\n          }, 410);\r\n        } else {\r\n          $ul.stop().animate({\r\n            top: 0\r\n          }, 400, digit !== data.iSec ? null : function () {\r\n            $li.eq(1).html(n);\r\n            $ul.css({\r\n              top: '-' + data.height + 'px'\r\n            });\r\n\r\n            if (step > 0 || digit !== data.iSec) {\r\n              return;\r\n            }\r\n\r\n            if (data.sec === data.countdownAlertLimit) {\r\n              $digits.parent().addClass('timeTo-alert');\r\n            } else if (data.sec === 0) {\r\n              $digits.parent().removeClass('timeTo-alert');\r\n\r\n              if (data.intervalId) {\r\n                clearTimeout(data.intervalId);\r\n                me.data('intervalId', null);\r\n              }\r\n\r\n              if (typeof data.callback === 'function') {\r\n                data.callback();\r\n              }\r\n            }\r\n          });\r\n        }\r\n        data.vals[digit] = n;\r\n      }\r\n\r\n      return $;\r\n    }));"],"file":"jquery.time-to.js"}